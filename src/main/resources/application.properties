#   Spring Boot дает вам настройки по умолчанию дл€ всех вещей.
#   Ќапример, база данных по умолчанию H2.
#   —ледовательно, когда вы хотите использовать любую другую базу данных,
#   вы должны определить атрибуты соединени€ в application.properties файле.

spring.jpa.hibernate.ddl-auto=update
spring.datasource.url=jdbc:mysql://${MYSQL_HOST:localhost}:3306/firm_db?serverTimezone=UTC
spring.datasource.username=firm_user
spring.datasource.password=FirmUserPassword
#   Log SQL statements
#   spring.jpa.show-sql = false
# useUnicode=true&
#   «десь, spring.jpa.hibernate.ddl-auto может быть none, update, create или create-drop. ѕодробности смотрите в документации по Hibernate .
#
#   none: ѕо умолчанию дл€ MySQL. ¬ структуру базы данных не внос€тс€ изменени€.
#   update: Hibernate измен€ет базу данных в соответствии с заданными структурами сущностей.
#   create: —оздает базу данных каждый раз, но не сбрасывает ее при закрытии.
#   create-drop: —оздает базу данных и удал€ет ее при SessionFactory закрытии.

#   ¬ы должны начать с или create или update, потому что у вас еще нет структуры базы данных.
#   ѕосле первого запуска вы можете переключить его на update или none, в соответствии с требовани€ми программы.
#   »спользуйте, update когда вы хотите внести некоторые изменени€ в структуру базы данных.
#
#   ѕо умолчанию дл€ H2 и других встроенных баз данных create-drop.
#   ƒл€ других баз данных, таких как MySQL, по умолчанию none.

#   Ёто практика , хороша€ безопасность , чтобы, после того, как база данных находитс€ в состо€нии производства,
#   установить это none, отменить все привилегии от пользовател€ MySQL, подключенного к приложению Spring,
#   и дать пользователю MySQL только SELECT, UPDATE, INSERT, и DELETE.
